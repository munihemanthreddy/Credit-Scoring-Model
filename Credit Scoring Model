import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, roc_curve
import matplotlib.pyplot as plt
import seaborn as sns

data = {
    'age': [25, 30, 35, 40, 45, 50, 55, 60, 65, 70],
    'monthly_income': [3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 11000, 12000],
    'total_debt': [500, 800, 1200, 1500, 2000, 2500, 3000, 3500, 4000, 4500],
    'creditworthy': [1, 1, 1, 0, 1, 0, 1, 0, 0, 1], # 1 for creditworthy, 0 otherwise
    'employment_status': ['Employed', 'Employed', 'Self-Employed', 'Unemployed', 'Employed', 'Self-Employed', 'Employed', 'Retired', 'Retired', 'Employed']
}
df_dummy = pd.DataFrame(data)
df_dummy.to_csv('my_credit_data.csv', index=False)

df = pd.read_csv('my_credit_data.csv')

print(df.info())
print(df.describe())


df = df.dropna()


categorical_cols = df.select_dtypes(include='object').columns
df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)


df['debt_to_income'] = df['total_debt'] / df['monthly_income'].replace(0, np.nan)
df = df.dropna(subset=['debt_to_income'])

X = df.drop('creditworthy', axis=1)
y = df['creditworthy']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

log_reg = LogisticRegression()
log_reg.fit(X_train, y_train)
y_pred_lr = log_reg.predict(X_test)

rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
y_pred_rf = rf.predict(X_test)

def evaluate_model(y_true, y_pred, model_name):
    print(f"\nModel: {model_name}")
    print(confusion_matrix(y_true, y_pred))
    print(classification_report(y_true, y_pred))

evaluate_model(y_test, y_pred_lr, "Logistic Regression")
evaluate_model(y_test, y_pred_rf, "Random Forest")

y_scores_rf = rf.predict_proba(X_test)[:, 1]

if len(np.unique(y_test)) > 1 and len(np.unique(y_scores_rf)) > 1:
    fpr, tpr, thresholds = roc_curve(y_test, y_scores_rf)
    roc_auc = roc_auc_score(y_test, y_scores_rf)

    plt.figure(figsize=(8, 6))
    plt.plot(fpr, tpr, label=f'Random Forest (AUC = {roc_auc:.2f})')
    plt.plot([0, 1], [0, 1], linestyle='--', color='gray')
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('ROC Curve')
    plt.legend()
    plt.show()
else:
    print("\nSkipping ROC curve calculation: Insufficient data points or target classes for ROC analysis.")
